<?phpclass article extends \BaseController {    /**     * Display a listing of the resource.     *     * @return Response     */    public function index() {        if (Request::ajax()) {            $articles = DB::table('articles')->select('articles.article_id', 'articles.titre', 'articles.date', 'articles.tags', 'articles.etat', 'users.username')                            ->join('users', 'users.id', '=', 'articles.auteur_id')                            ->leftjoin('articles as temp', function($join) {                                $join->on('articles.article_id', '=', 'temp.article_id')                                ->on('articles.version_id', '<', 'temp.version_id');                            })->whereNull('temp.article_id')                            ->where('articles.etat', 98)->get();            return json_encode($articles);        } else {            $articles = DB::table('articles')->select('articles.article_id', 'articles.titre', 'articles.date', 'articles.tags', 'articles.etat', 'users.username')                            ->join('users', 'users.id', '=', 'articles.auteur_id')                            ->leftjoin('articles as temp', function($join) {                                $join->on('articles.article_id', '=', 'temp.article_id')                                ->on('articles.version_id', '<', 'temp.version_id');                            })->whereNull('temp.article_id')                            ->where('articles.etat', '<', '90')->get();            $supprimés = DB::table('articles')->where('etat', 98)->count();            return View::make('admin/article/articleIndex', array('articles' => $articles, 'supprimes' => $supprimés));        }    }    /**     * Show the form for creating a new resource.     *     * @return Response     */    public function create() {        $editeurs = DB::table('users')->select('id', 'username')->where('droits', '>', 20)->get();        $array_editeurs = array();        foreach ($editeurs as $editeur) {            $array_editeurs = array_add($array_editeurs, $editeur->id, $editeur->username);        }return View::make('admin/article/articleEdit', array('editeurs' => $array_editeurs));    }    /**     * Store a newly created resource in storage.     *     * @return Response     */    public function store() {        DB::transaction(function() use (&$nextId) {            $t = Input::all();            if (isset($t['idem']) || $t['resume'] == '')                $t['resume'] = 'texte';            $nextId = 1 + DB::table('articles')->max('article_id');            DB::table('articles')->insert(array(                'article_id' => $nextId,                'version_id' => 1,                'parent_id' => $t['parent_id'],                'auteur_id' => $t['auteur_id'],                'titre' => $t['titre'],                'texte' => $t['texte'],                'resume' => $t['resume'],                'date' => time(),                'tags' => $t['tags'],                'etat' => $t['etat'],            ));        });        return Redirect::action('article@edit', array($nextId));    }    /**     * Display the specified resource.     *     * @param  int  $id     * @param  int  $v, la version de l'article     * @return Response     */    public function show($id, $v = null) {        if (is_null($v))            $articles = DB::table('articles')->where('article_id', $id)->where('articles.etat', '<', '90')->get();        else            $articles = DB::table('articles')->where('article_id', $id)->where('version_id', $v)->get();        foreach ($articles as $article) {            article::formater($article);        }        return View::make('index', array('articles' => $articles));    }    /**     * Show the form for editing the specified resource.     *     * @param  int  $id     * @return Response     */    public function edit($id) {        $article = DB::table('articles')->join('users', 'users.id', '=', 'articles.auteur_id')                        ->select('articles.*', 'users.username', 'articles.id as idArticle', 'users.id as idUser')->where('article_id', $id)->orderby('version_id', 'desc')->first();        $assets = DB::table('assets')->select('assets.*', 'metas.id as id_meta')->join('metas', 'metas.id2', '=', 'assets.id')->where('metas.id1', $id)->get();        $editeurs = DB::table('users')->select('id', 'username')->where('droits', '>', 20)->get();        $array_editeurs = array();        foreach ($editeurs as $editeur) {            $array_editeurs = array_add($array_editeurs, $editeur->id, $editeur->username);        }        $versions = DB::table('articles')->select('*')->where('article_id', $id)->orderby('version_id', 'desc')->get();        return View::make('admin/article/articleEdit', array('article' => $article, 'assets' => $assets, 'editeurs' => $array_editeurs, 'versions' => $versions));    }    /**     * Update the specified resource in storage.     *     * @param  int  $id     * @return Response     */    public function update($id) {        DB::transaction(function() use (&$id) {            $t = Input::all();            $a = DB::table('articles')->join('users', 'users.id', '=', 'articles.auteur_id')                            ->select('articles.*', 'users.username', 'articles.id as idArticle', 'users.id as idUser')->where('article_id', $id)->orderby('version_id', 'desc')->first();            if (isset($t['idem']) || $t['resume'] == '')                $t['resume'] = 'texte';            if (!($t['texte'] === $a->texte &&                    $t['titre'] === $a->titre &&                    $t['resume'] === $a->resume &&                    $t['tags'] === $a->tags &&                    $t['etat'] === $a->etat &&                    $t['auteur_id'] === $a->auteur_id &&                    $t['parent_id'] === $a->parent_id)) {                $nextId = 1 + DB::table('articles')->where('article_id', head(explode(' / ', $t['article'])))->max('version_id');                $newId = DB::table('articles')->insertGetId(array(                    'article_id' => head(explode(' / ', $t['article'])),                    'version_id' => $nextId,                    'parent_id' => $t['parent_id'],                    'auteur_id' => $t['auteur_id'],                    'titre' => $t['titre'],                    'texte' => $t['texte'],                    'resume' => $t['resume'],                    'date' => time(),                    'tags' => $t['tags'],                    'etat' => $t['etat'],                ));                DB::table('articles')->where('article_id', $id)->where('id', '!=', $newId)->update(array('etat' => 99));            }            $id = head(explode(' / ', $t['article']));        });        return Redirect::action('article@edit', array($id));    }    /**     * Remove the specified resource from storage.     *     * @param  int  $id     * @return Response     */    public function destroy($id) {        DB::table('articles')->where('article_id', $id)->where('etat', '<', 90)->update(array('etat' => 98));        return Redirect::action('article@index');    }    public static function formater(&$article) {        $metas = DB::table('metas')->select('metas.id as id', 'metas.type as type', 'assets.url as url')                        ->join('assets', 'assets.id', '=', 'metas.id2')                        ->where('nom1', 'article')->where('id1', $article->article_id)->get();        $article->texte = '<p>' . $article->texte . '</p>';        $article->texte = str_replace(PHP_EOL, '</p><p>', $article->texte);        foreach ($metas as $meta) {            switch ($meta->type) {                case 3:                    $pattern = '#\[' . $meta->id . '\]#';                    $remplacement = '</p>' . image_tag(str_replace("images/", "", $meta->url)) . '<p>';                    $article->texte = preg_replace($pattern, $remplacement, $article->texte);                    break;                case 4:                    break;                default:                    break;            }        }    }    public function missingMethod($parameters = array()) {        dd($parameters); //return Redirect::route('home', $parameters);    }}